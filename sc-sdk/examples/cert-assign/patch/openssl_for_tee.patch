diff -uprN a/Configure b/Configure
--- a/Configure	2021-03-25 21:28:38.000000000 +0800
+++ b/Configure	2022-08-16 06:44:04.480279159 +0800
@@ -318,7 +318,7 @@ my $auto_threads=1;    # enable threads
 my $default_ranlib;
 
 # Top level directories to build
-$config{dirs} = [ "crypto", "ssl", "engines", "apps", "test", "util", "tools", "fuzz" ];
+$config{dirs} = [ "crypto" ];
 # crypto/ subdirectories to build
 $config{sdirs} = [
     "objects",
diff -uprN a/crypto/armcap.c b/crypto/armcap.c
--- a/crypto/armcap.c	2021-03-25 21:28:38.000000000 +0800
+++ b/crypto/armcap.c	2022-08-16 06:44:04.532279419 +0800
@@ -17,9 +17,12 @@
 
 #include "arm_arch.h"
 
-unsigned int OPENSSL_armcap_P = 0;
+#if defined(__arm__) || defined(__arm)
+unsigned int OPENSSL_armcap_P = ARMV7_NEON;
+#else
+unsigned int OPENSSL_armcap_P = ARMV8_AES | ARMV8_PMULL | ARMV8_SHA1 | ARMV8_SHA256;
+#endif
 
-#if __ARM_MAX_ARCH__<7
 void OPENSSL_cpuid_setup(void)
 {
 }
@@ -28,204 +31,3 @@ uint32_t OPENSSL_rdtsc(void)
 {
     return 0;
 }
-#else
-static sigset_t all_masked;
-
-static sigjmp_buf ill_jmp;
-static void ill_handler(int sig)
-{
-    siglongjmp(ill_jmp, sig);
-}
-
-/*
- * Following subroutines could have been inlined, but it's not all
- * ARM compilers support inline assembler...
- */
-void _armv7_neon_probe(void);
-void _armv8_aes_probe(void);
-void _armv8_sha1_probe(void);
-void _armv8_sha256_probe(void);
-void _armv8_pmull_probe(void);
-# ifdef __aarch64__
-void _armv8_sha512_probe(void);
-# endif
-uint32_t _armv7_tick(void);
-
-uint32_t OPENSSL_rdtsc(void)
-{
-    if (OPENSSL_armcap_P & ARMV7_TICK)
-        return _armv7_tick();
-    else
-        return 0;
-}
-
-# if defined(__GNUC__) && __GNUC__>=2
-void OPENSSL_cpuid_setup(void) __attribute__ ((constructor));
-# endif
-
-# if defined(__GLIBC__) && defined(__GLIBC_PREREQ)
-#  if __GLIBC_PREREQ(2, 16)
-#   include <sys/auxv.h>
-#   define OSSL_IMPLEMENT_GETAUXVAL
-#  endif
-# endif
-# if defined(__FreeBSD__)
-#  include <sys/param.h>
-#  if __FreeBSD_version >= 1200000
-#   include <sys/auxv.h>
-#   define OSSL_IMPLEMENT_GETAUXVAL
-
-static unsigned long getauxval(unsigned long key)
-{
-  unsigned long val = 0ul;
-
-  if (elf_aux_info((int)key, &val, sizeof(val)) != 0)
-    return 0ul;
-
-  return val;
-}
-#  endif
-# endif
-
-/*
- * ARM puts the feature bits for Crypto Extensions in AT_HWCAP2, whereas
- * AArch64 used AT_HWCAP.
- */
-# if defined(__arm__) || defined (__arm)
-#  define HWCAP                  16
-                                  /* AT_HWCAP */
-#  define HWCAP_NEON             (1 << 12)
-
-#  define HWCAP_CE               26
-                                  /* AT_HWCAP2 */
-#  define HWCAP_CE_AES           (1 << 0)
-#  define HWCAP_CE_PMULL         (1 << 1)
-#  define HWCAP_CE_SHA1          (1 << 2)
-#  define HWCAP_CE_SHA256        (1 << 3)
-# elif defined(__aarch64__)
-#  define HWCAP                  16
-                                  /* AT_HWCAP */
-#  define HWCAP_NEON             (1 << 1)
-
-#  define HWCAP_CE               HWCAP
-#  define HWCAP_CE_AES           (1 << 3)
-#  define HWCAP_CE_PMULL         (1 << 4)
-#  define HWCAP_CE_SHA1          (1 << 5)
-#  define HWCAP_CE_SHA256        (1 << 6)
-#  define HWCAP_CE_SHA512        (1 << 21)
-# endif
-
-void OPENSSL_cpuid_setup(void)
-{
-    const char *e;
-    struct sigaction ill_oact, ill_act;
-    sigset_t oset;
-    static int trigger = 0;
-
-    if (trigger)
-        return;
-    trigger = 1;
-
-    if ((e = getenv("OPENSSL_armcap"))) {
-        OPENSSL_armcap_P = (unsigned int)strtoul(e, NULL, 0);
-        return;
-    }
-
-# if defined(__APPLE__) && !defined(__aarch64__)
-    /*
-     * Capability probing by catching SIGILL appears to be problematic
-     * on iOS. But since Apple universe is "monocultural", it's actually
-     * possible to simply set pre-defined processor capability mask.
-     */
-    if (1) {
-        OPENSSL_armcap_P = ARMV7_NEON;
-        return;
-    }
-    /*
-     * One could do same even for __aarch64__ iOS builds. It's not done
-     * exclusively for reasons of keeping code unified across platforms.
-     * Unified code works because it never triggers SIGILL on Apple
-     * devices...
-     */
-# endif
-
-    OPENSSL_armcap_P = 0;
-
-# ifdef OSSL_IMPLEMENT_GETAUXVAL
-    if (getauxval(HWCAP) & HWCAP_NEON) {
-        unsigned long hwcap = getauxval(HWCAP_CE);
-
-        OPENSSL_armcap_P |= ARMV7_NEON;
-
-        if (hwcap & HWCAP_CE_AES)
-            OPENSSL_armcap_P |= ARMV8_AES;
-
-        if (hwcap & HWCAP_CE_PMULL)
-            OPENSSL_armcap_P |= ARMV8_PMULL;
-
-        if (hwcap & HWCAP_CE_SHA1)
-            OPENSSL_armcap_P |= ARMV8_SHA1;
-
-        if (hwcap & HWCAP_CE_SHA256)
-            OPENSSL_armcap_P |= ARMV8_SHA256;
-
-#  ifdef __aarch64__
-        if (hwcap & HWCAP_CE_SHA512)
-            OPENSSL_armcap_P |= ARMV8_SHA512;
-#  endif
-    }
-# endif
-
-    sigfillset(&all_masked);
-    sigdelset(&all_masked, SIGILL);
-    sigdelset(&all_masked, SIGTRAP);
-    sigdelset(&all_masked, SIGFPE);
-    sigdelset(&all_masked, SIGBUS);
-    sigdelset(&all_masked, SIGSEGV);
-
-    memset(&ill_act, 0, sizeof(ill_act));
-    ill_act.sa_handler = ill_handler;
-    ill_act.sa_mask = all_masked;
-
-    sigprocmask(SIG_SETMASK, &ill_act.sa_mask, &oset);
-    sigaction(SIGILL, &ill_act, &ill_oact);
-
-    /* If we used getauxval, we already have all the values */
-# ifndef OSSL_IMPLEMENT_GETAUXVAL
-    if (sigsetjmp(ill_jmp, 1) == 0) {
-        _armv7_neon_probe();
-        OPENSSL_armcap_P |= ARMV7_NEON;
-        if (sigsetjmp(ill_jmp, 1) == 0) {
-            _armv8_pmull_probe();
-            OPENSSL_armcap_P |= ARMV8_PMULL | ARMV8_AES;
-        } else if (sigsetjmp(ill_jmp, 1) == 0) {
-            _armv8_aes_probe();
-            OPENSSL_armcap_P |= ARMV8_AES;
-        }
-        if (sigsetjmp(ill_jmp, 1) == 0) {
-            _armv8_sha1_probe();
-            OPENSSL_armcap_P |= ARMV8_SHA1;
-        }
-        if (sigsetjmp(ill_jmp, 1) == 0) {
-            _armv8_sha256_probe();
-            OPENSSL_armcap_P |= ARMV8_SHA256;
-        }
-#  if defined(__aarch64__) && !defined(__APPLE__)
-        if (sigsetjmp(ill_jmp, 1) == 0) {
-            _armv8_sha512_probe();
-            OPENSSL_armcap_P |= ARMV8_SHA512;
-        }
-#  endif
-    }
-# endif
-
-    /* Things that getauxval didn't tell us */
-    if (sigsetjmp(ill_jmp, 1) == 0) {
-        _armv7_tick();
-        OPENSSL_armcap_P |= ARMV7_TICK;
-    }
-
-    sigaction(SIGILL, &ill_oact, NULL);
-    sigprocmask(SIG_SETMASK, &oset, NULL);
-}
-#endif
diff -uprN a/crypto/LPdir_unix.c b/crypto/LPdir_unix.c
--- a/crypto/LPdir_unix.c	2021-03-25 21:28:38.000000000 +0800
+++ b/crypto/LPdir_unix.c	2022-08-16 06:44:04.528279399 +0800
@@ -41,7 +41,6 @@
 #include <limits.h>
 #include <string.h>
 #include <sys/types.h>
-#include <dirent.h>
 #include <errno.h>
 #ifndef LPDIR_H
 # include "LPdir.h"
@@ -74,95 +73,16 @@
 #endif
 
 struct LP_dir_context_st {
-    DIR *dir;
-    char entry_name[LP_ENTRY_SIZE + 1];
-#ifdef __VMS
-    int expect_file_generations;
-    char previous_entry_name[LP_ENTRY_SIZE + 1];
-#endif
+    void *dummy;
 };
-
 const char *LP_find_file(LP_DIR_CTX **ctx, const char *directory)
 {
-    struct dirent *direntry = NULL;
-
-    if (ctx == NULL || directory == NULL) {
-        errno = EINVAL;
-        return 0;
-    }
-
-    errno = 0;
-    if (*ctx == NULL) {
-        *ctx = malloc(sizeof(**ctx));
-        if (*ctx == NULL) {
-            errno = ENOMEM;
-            return 0;
-        }
-        memset(*ctx, 0, sizeof(**ctx));
-
-#ifdef __VMS
-        {
-            char c = directory[strlen(directory) - 1];
-
-            if (c == ']' || c == '>' || c == ':')
-                (*ctx)->expect_file_generations = 1;
-        }
-#endif
-
-        (*ctx)->dir = opendir(directory);
-        if ((*ctx)->dir == NULL) {
-            int save_errno = errno; /* Probably not needed, but I'm paranoid */
-            free(*ctx);
-            *ctx = NULL;
-            errno = save_errno;
-            return 0;
-        }
-    }
-
-#ifdef __VMS
-    strncpy((*ctx)->previous_entry_name, (*ctx)->entry_name,
-            sizeof((*ctx)->previous_entry_name));
-
- again:
-#endif
-
-    direntry = readdir((*ctx)->dir);
-    if (direntry == NULL) {
-        return 0;
-    }
-
-    OPENSSL_strlcpy((*ctx)->entry_name, direntry->d_name,
-                    sizeof((*ctx)->entry_name));
-#ifdef __VMS
-    if ((*ctx)->expect_file_generations) {
-        char *p = (*ctx)->entry_name + strlen((*ctx)->entry_name);
-
-        while(p > (*ctx)->entry_name && isdigit(p[-1]))
-            p--;
-        if (p > (*ctx)->entry_name && p[-1] == ';')
-            p[-1] = '\0';
-        if (strcasecmp((*ctx)->entry_name, (*ctx)->previous_entry_name) == 0)
-            goto again;
-    }
-#endif
-    return (*ctx)->entry_name;
+    errno = EINVAL;
+    return 0;
 }
 
 int LP_find_file_end(LP_DIR_CTX **ctx)
 {
-    if (ctx != NULL && *ctx != NULL) {
-        int ret = closedir((*ctx)->dir);
-
-        free(*ctx);
-        switch (ret) {
-        case 0:
-            return 1;
-        case -1:
-            return 0;
-        default:
-            break;
-        }
-    }
     errno = EINVAL;
     return 0;
 }
diff -uprN a/crypto/pkcs7/bio_pk7.c b/crypto/pkcs7/bio_pk7.c
--- a/crypto/pkcs7/bio_pk7.c	2021-03-25 21:28:38.000000000 +0800
+++ b/crypto/pkcs7/bio_pk7.c	2022-08-16 06:44:04.516279339 +0800
@@ -11,9 +11,6 @@
 #include <openssl/pkcs7.h>
 #include <openssl/bio.h>
 
-#if !defined(OPENSSL_SYS_VXWORKS)
-# include <memory.h>
-#endif
 #include <stdio.h>
 
 /* Streaming encode support for PKCS#7 */
diff -uprN a/crypto/rand/rand_lib.c b/crypto/rand/rand_lib.c
--- a/crypto/rand/rand_lib.c	2021-03-25 21:28:38.000000000 +0800
+++ b/crypto/rand/rand_lib.c	2022-08-16 06:44:04.516279339 +0800
@@ -16,6 +16,9 @@
 #include "internal/thread_once.h"
 #include "rand_local.h"
 #include "e_os.h"
+#ifdef OPENSSL_RAND_TEE
+#include <tee_crypto_api.h>
+#endif
 
 #ifndef OPENSSL_NO_ENGINE
 /* non-NULL if default_RAND_meth is ENGINE-provided */
@@ -920,6 +923,10 @@ void RAND_add(const void *buf, int num,
  */
 int RAND_priv_bytes(unsigned char *buf, int num)
 {
+#ifdef OPENSSL_RAND_TEE
+    TEE_GenerateRandom(buf, num);
+    return 1;
+#else
     const RAND_METHOD *meth = RAND_get_rand_method();
     RAND_DRBG *drbg;
 
@@ -931,16 +938,22 @@ int RAND_priv_bytes(unsigned char *buf,
         return RAND_DRBG_bytes(drbg, buf, num);
 
     return 0;
+#endif
 }
 
 int RAND_bytes(unsigned char *buf, int num)
 {
+#ifdef OPENSSL_RAND_TEE
+    TEE_GenerateRandom(buf, num);
+    return 1;
+#else
     const RAND_METHOD *meth = RAND_get_rand_method();
 
     if (meth != NULL && meth->bytes != NULL)
         return meth->bytes(buf, num);
     RANDerr(RAND_F_RAND_BYTES, RAND_R_FUNC_NOT_IMPLEMENTED);
     return -1;
+#endif
 }
 
 #if OPENSSL_API_COMPAT < 0x10100000L
diff -uprN a/crypto/uid.c b/crypto/uid.c
--- a/crypto/uid.c	2021-03-25 21:28:38.000000000 +0800
+++ b/crypto/uid.c	2022-08-16 06:44:04.532279419 +0800
@@ -40,10 +40,6 @@ int OPENSSL_issetugid(void)
 
 int OPENSSL_issetugid(void)
 {
-# ifdef OSSL_IMPLEMENT_GETAUXVAL
-    return getauxval(AT_SECURE) != 0;
-# else
-    return getuid() != geteuid() || getgid() != getegid();
-# endif
+    return 0;
 }
 #endif
diff -uprN a/e_os.h b/e_os.h
--- a/e_os.h	2021-03-25 21:28:38.000000000 +0800
+++ b/e_os.h	2022-08-16 06:44:04.496279239 +0800
@@ -29,9 +29,6 @@
  */
 #  define DEVRANDOM "/dev/urandom", "/dev/random", "/dev/hwrng", "/dev/srandom"
 #  if defined(__linux) && !defined(__ANDROID__)
-#   ifndef DEVRANDOM_WAIT
-#    define DEVRANDOM_WAIT   "/dev/random"
-#   endif
 /*
  * Linux kernels 4.8 and later changes how their random device works and there
  * is no reliable way to tell that /dev/urandom has been seeded -- getentropy(2)
